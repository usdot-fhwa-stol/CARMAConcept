%% File : EncodeBSM.tlc
%% Created: Fri Aug 21 11:00:19 2015
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "EncodeBSM.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  EncodeBSM "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign hFileName = "EncodeBSM_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"
    extern void EncodeBSM_Outputs_wrapper_accel(const void *BSM_Data, void *__BSM_DataBUS,
                          uint8_T *Buffer,
                          uint32_T *Length);
    #endif
    %closefile hFile

    %assign cFileName = "EncodeBSM_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "EncodeBSM_bus.h"
	void EncodeBSM_Outputs_wrapper_accel(const void *BSM_Data, void *__BSM_DataBUS,
                          uint8_T *Buffer,
                          uint32_T *Length){
	%assign dTypeId = LibBlockInputSignalDataTypeId(0)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(BasicSafetyMessage*) __BSM_DataBUS)", "(char *)BSM_Data", 0)>
	EncodeBSM_Outputs_wrapper((BasicSafetyMessage *) __BSM_DataBUS,
                          Buffer,
                          Length);
}

   %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs
    
  extern void EncodeBSM_Outputs_wrapper(const BasicSafetyMessage *BSM_Data,
                          uint8_T *Buffer,
                          uint32_T *Length);
  %closefile externs
  %<LibCacheExtern(externs)>

 %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign u0BUS_ptr = LibBlockDWorkAddr(u0BUS, "", "", 0)
	EncodeBSM_Outputs_wrapper_accel(%<pu0>, %<u0BUS_ptr>, %<py0>, %<py1> );
  %else
	EncodeBSM_Outputs_wrapper(%<pu0>, %<py0>, %<py1> );
  %endif
  %%
%endfunction


%% [EOF] EncodeBSM.tlc





