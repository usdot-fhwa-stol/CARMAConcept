package gov.dot.fhwa.saxton.carmasecondary.consumers.dsrc;

import gov.dot.fhwa.saxton.carmasecondary.utils.IAppConfig;
import org.junit.Before;
import org.junit.Test;

public class ObuDsrcProcessorTester {

    private static byte[] noMessage = { 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    private static byte[] bsmHeaderOnly = { 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, (byte) 0x80, 0x01, 0x02, 0x08, 0x09 };
    private static byte[] shortLength = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, 0x55, 0x00, 
    	0x02, 0x00, 0x30, 0x51, (byte) 0x80, 0x01, 0x02, (byte) 0x81, 0x26, 0x2b, (byte) 0xea, (byte) 0xf5, 0x0a, 0x44, (byte) 0x87, (byte) 0x8c, 
    	0x17, (byte) 0xf6, 0x10, 0x0a, (byte) 0xd3, 0x36, 0x4c, (byte) 0xf2, 0x02, (byte) 0xe9, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00,  
    	0x70, (byte) 0x80, 0x7f, (byte) 0xff, (byte) 0xfc, 0x07, (byte) 0xd1, (byte) 0x81, 0x7f, (byte) 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0xa2, 
    	0x1a, (byte) 0xa1, 0x0f, (byte) 0x82, 0x01, 0x01, (byte) 0xa3, 0x0a, (byte) 0x83, 0x08, 0x00, 0x4d, (byte) 0xbf, (byte) 0xf0, (byte) 0xbf, (byte) 0xf3,  
    	(byte) 0xff, (byte) 0xfe, (byte) 0xa2, 0x07, (byte) 0x80, 0x02, 0x7f, (byte) 0xff, (byte) 0x81, 0x01, 0x64, (byte) 0xa3, 0x08, (byte) 0x80, 0x01, 0x00, 
    	(byte) 0xb2, 0x03, (byte) 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    private static byte[] longLength1Byte = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, 0x55, 0x00, 
    	0x02, 0x00, 0x30, (byte) 0x81, 0x51, (byte) 0x80, 0x01, 0x02, (byte) 0x81, 0x26, 0x2b, (byte) 0xea, (byte) 0xf5, 0x0a, 0x44, (byte) 0x87, (byte) 0x8c, 
    	0x17, (byte) 0xf6, 0x10, 0x0a, (byte) 0xd3, 0x36, 0x4c, (byte) 0xf2, 0x02, (byte) 0xe9, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00,  
    	0x70, (byte) 0x80, 0x7f, (byte) 0xff, (byte) 0xfc, 0x07, (byte) 0xd1, (byte) 0x81, 0x7f, (byte) 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0xa2, 
    	0x1a, (byte) 0xa1, 0x0f, (byte) 0x82, 0x01, 0x01, (byte) 0xa3, 0x0a, (byte) 0x83, 0x08, 0x00, 0x4d, (byte) 0xbf, (byte) 0xf0, (byte) 0xbf, (byte) 0xf3,  
    	(byte) 0xff, (byte) 0xfe, (byte) 0xa2, 0x07, (byte) 0x80, 0x02, 0x7f, (byte) 0xff, (byte) 0x81, 0x01, 0x64, (byte) 0xa3, 0x08, (byte) 0x80, 0x01, 0x00, 
    	(byte) 0xb2, 0x03, (byte) 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    private static byte[] longLength2Bytes = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, 0x55, 0x00, 
    	0x02, 0x00, 0x30, (byte) 0x82, 0x01, 0x2a, (byte) 0x80, 0x01, 0x02, (byte) 0x81, 0x26, 0x2b, (byte) 0xea, (byte) 0xf5, 0x0a, 0x44, (byte) 0x87, (byte) 0x8c, 
    	0x17, (byte) 0xf6, 0x10, 0x0a, (byte) 0xd3, 0x36, 0x4c, (byte) 0xf2, 0x02, (byte) 0xe9, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00,  
    	0x70, (byte) 0x80, 0x7f, (byte) 0xff, (byte) 0xfc, 0x07, (byte) 0xd1, (byte) 0x81, 0x7f, (byte) 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0xa2, 
    	0x1a, (byte) 0xa1, 0x0f, (byte) 0x82, 0x01, 0x01, (byte) 0xa3, 0x0a, (byte) 0x83, 0x08, 0x00, 0x4d, (byte) 0xbf, (byte) 0xf0, (byte) 0xbf, (byte) 0xf3,  
    	(byte) 0xff, (byte) 0xfe, (byte) 0xa2, 0x07, (byte) 0x80, 0x02, 0x7f, (byte) 0xff, (byte) 0x81, 0x01, 0x64, (byte) 0xa3, 0x08, (byte) 0x80, 0x01, 0x00, 
    	(byte) 0xb2, 0x03, (byte) 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    private static byte[] longLength2BytesLive = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, (byte) 0x86, 0x00, 
    	0x02, 0x00, 0x30, (byte) 0x81, (byte) 0x81, (byte) 0x80, 0x01, 0x02, (byte) 0x81, 0x26, 0x01, 0x11, 0x1e, (byte) 0xa3, (byte) 0xe0, 0x10, 
    	0x04, 0x17, (byte) 0xf6, 0x0f, (byte) 0xb4, (byte) 0xd3, 0x36, 0x4b, 0x47, 0x02, (byte) 0xf7, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 
    	0x00, 0x0d, (byte) 0x9f, 0x7f, 0x00, 0x00, 0x07, (byte) 0xd1, (byte) 0x81, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
    	(byte) 0xa2, 0x4a, (byte) 0xa1, 0x3f, (byte) 0x82, 0x01, 0x07, (byte) 0xa3, 0x3a, (byte) 0x83, 0x38, 0x00, (byte) 0xe2, (byte) 0xc0, 0x42, (byte) 0x80, 
    	0x37, (byte) 0xff, (byte) 0xfe, 0x01, (byte) 0xf1, 0x00, (byte) 0xdf, (byte) 0xd0, 0x38, (byte) 0xff, (byte) 0xfe, 0x03, 0x08, (byte) 0x82, 0x0a, (byte) 0x80, 
    	0x3b, (byte) 0xff, (byte) 0xfe, 0x04, 0x2c, 0x03, 0x08, 0x30, 0x3c, (byte) 0xff, (byte) 0xfe, 0x06, 0x05, 0x04, 0x10, 0x60, 
    	0x3d, (byte) 0xff, (byte) 0xfe, 0x0a, 0x1c, 0x45, (byte) 0xd9, 0x60, 0x3c, (byte) 0xff, (byte) 0xfe, 0x12, (byte) 0x9b, 0x49, 0x20, 0x20, 
    	0x36, (byte) 0xff, (byte) 0xfe, (byte) 0xa2, 0x07, (byte) 0x80, 0x02, 0x7f, (byte) 0xff, (byte) 0x81, 0x01, 0x64, (byte) 0xa3, 0x08, (byte) 0x80, 0x01, 
    	0x00, (byte) 0xb2, 0x03, (byte) 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    private static byte[] indefiniteLength = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, 0x55, 0x00, 
    	0x02, 0x00, 0x30, (byte) 0x80, (byte) 0x80, 0x01, 0x02, (byte) 0x81, 0x26, 0x2b, (byte) 0xea, (byte) 0xf5, 0x0a, 0x44, (byte) 0x87, (byte) 0x8c, 
    	0x17, (byte) 0xf6, 0x10, 0x0a, (byte) 0xd3, 0x36, 0x4c, (byte) 0xf2, 0x02, (byte) 0xe9, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00,  
    	0x70, (byte) 0x80, 0x7f, (byte) 0xff, (byte) 0xfc, 0x07, (byte) 0xd1, (byte) 0x81, 0x7f, (byte) 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0xa2, 
    	0x1a, (byte) 0xa1, 0x0f, (byte) 0x82, 0x01, 0x01, (byte) 0xa3, 0x0a, (byte) 0x83, 0x08, 0x00, 0x4d, (byte) 0xbf, (byte) 0xf0, (byte) 0xbf, (byte) 0xf3,  
    	(byte) 0xff, (byte) 0xfe, (byte) 0xa2, 0x07, (byte) 0x80, 0x02, 0x7f, (byte) 0xff, (byte) 0x81, 0x01, 0x64, (byte) 0xa3, 0x08, (byte) 0x80, 0x01, 0x00, 
    	(byte) 0xb2, 0x03, (byte) 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	IAppConfig ti = TestConfig.getInstance();
	TestConfig tc = (TestConfig)ti;

    @Before
    public void startup() {
		tc.setProperty("asd.host",			"192.168.88.40");
		tc.setProperty("asd.inport",		"5002");
		tc.setProperty("asd.maxpacketsize",	"1472");
		tc.setProperty("mab.dsrc.outport",	"8888");
		tc.setProperty("mab.host",			"192.168.88.21");
		tc.setProperty("udp.timeout",		"500");
    }

	@Test
	public void testExtractWsmpNoMessage() {
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
		p.extractWsmp(noMessage);
	}
    
    @Test
    public void testExtractWsmpBsmHeaderOnly() {
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
    	p.extractWsmp(bsmHeaderOnly);
    }
    
    @Test
    public void testExtractWsmpShortLength() {
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
    	p.extractWsmp(shortLength);
    }

    @Test
    public void testExtractWsmpLong1() {
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
    	p.extractWsmp(longLength1Byte);
    }
    
    @Test
    public void testExtractWsmpLong2() {
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
    	p.extractWsmp(longLength2Bytes);
    }
    
    @Test
    public void testExtractWsmpLong3() { //uses live data (still may be faulty content)
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
    	p.extractWsmp(longLength2BytesLive);
    }
    
    @Test
    public void testExtractWsmpIndefinite() {
    	ObuDsrcProcessor p = new ObuDsrcProcessor(ti);
    	p.extractWsmp(indefiniteLength);
    }
}
